**Context:**

SocialBuzz is a leading social media platform dedicated to fostering connections and engagement among users through innovative features and community-building tools

Analysing the structure of user connections helps SocialBuzz enhance its algorithms for recommendations and engagement. 

Understanding second-degree followers—users who both follow others and follow themselves—is crucial for identifying active and influential users on the platform.

As an analyst at SocialBuzz, my manager has asked you to identify second-degree followers and count their followers.

This analysis will provide insights into user engagement patterns and help refine the platform's recommendation systems.

Problem Statement:

A second-degree follower is a user follows at least one user, and is followed by at least one user.

Write a query to report the second-degree users and the number of their followers.

Table: follow:
                   +-----------+-----------+
                   | followee  | follower  |
                   +-----------+-----------+
                   | Alice     |  Bob      |
                   |  Bob      |  Cena     |
                   | Bob       | Donald    |
                   | Donald    | Edward    |
                   +-----------+-----------+

Query:
                  select
                  followee  as follower,
                  count(*) as num
                  from follow
                  where followee in (
                  select follower
                  from follow )
                  group by followee
                  order by followee
           
Sample output:
                   +---------+--------+
                   |follower |  num   |
                   +---------+--------+
                   | Bob     |   2    |
                   |Donald   |   1    |
                   +---------+--------+


Explanation:

User Bob has 2 followers. Bob is a second-degree follower because he follows Alice, so we include him in the result table.

User Donald has 1 follower. Donald is a second-degree follower because he follows Bob, so we include him in the result table.

User Alice has 1 follower. Alice is not a second-degree follower because she does not follow anyone, so we don not include her in the result table.


# Problem Statement:

Write a query to calculate the total time in minutes spent by each employee on each day at the office.

Note that within one day, an employee can enter and leave more than once. The time spent in the office for a single entry is out_time - in_time.

Return the result table ordered by day column in ascending order.

Table:employees

          +--------+----------+---------+----------+
          | emp_id |event_day | in_time | out_time |
          +--------+----------+---------+----------+
          | 1      |2020-11-28|   4     |   32     |
          | 1      |2020-11-28|   55    |  200     |
          | 1      |2020-12-03|    1    |   42     |
          | 2      |2020-11-28|    3    |   33     |
          | 2      |2020-12-09|   47    |   74     |
          +--------+----------+---------+----------+

 Query: 
            select
            event_day as day,
            emp_id,
            sum(out_time-in_time) as total_time
            from employees 
            group by emp_id,day
            order by day

output:
                   +----------+---------+----------+
                   |event_day | emp_id  | out_time |
                   +----------+---------+----------+
                   |2020-11-28|   1     |   173    |
                   |2020-11-28|   2     |    30    |
                   |2020-12-03|   1     |    41    |
                   |2020-12-09|   2     |    27    |
                   +----------+---------+----------+

Explanation:

Employee 1 has three events: two on day 2020-11-28 with a total of (32 - 4) + (200 - 55) = 173, and one on day 2020-12-03 with a total of (42 - 1) = 41.

Employee 2 has two events: one on day 2020-11-28 with a total of (33 - 3) = 30, and one on day 2020-12-09 with a total of (74 - 47) = 27.


## Common Table Expression (cte) recursive

Problem Statement:

Given a table "Numbers" with a single column "number," write a query to find the missing numbers in the sequence from 1 to 100 (excluding the ones present in the table).

Table:- Numbers

+-------+
|number |
+-------+
|   1   |
|   2   |
|   4   |
|   6   |
|  ...  |
|   98  |
|  100  |
+-------+

+--------+
| Result |
+--------+
| number |
|   3    |
|   5    |
|   7    |
+--------+


Query:-  
         with sequence as(
         select 1 as number
         union all
         select number + 1
         from sequence
         where number<100
         )
         select s.number
         from sequence as s 
         join Number as n
         on s.number=n.number
         where n.number is null
         order by s.number

Explanation:-
                 we want to generate a list of numbers from 1 to 100. Using a CTE, we can achieve this efficiently with a recursive query

                 WITH Sequence AS: This line begins the definition of the CTE named Sequence.

                 SELECT 1 AS number: The initial part of the CTE, known as the anchor member, starts the sequence with the number 1. This sets the foundation for our sequence.

                 UNION ALL: Combines the result of the anchor member with the recursive member.

                 SELECT number + 1 FROM Sequence: The recursive member. For each row produced by the CTE, it adds 1 to the current number.

                 WHERE number < 100: Ensures that the sequence stops at 100, preventing infinite recursion.

                 Define the Sequence: Generate numbers from 1 to 100 using the CTE.

                 LEFT JOIN: Join the generated sequence with the Numbers table to identify which numbers are present and which are missing.

                 Filter Missing Numbers: Use WHERE n.number IS NULL to filter out the numbers that are present, leaving only the missing ones.

                 Order the Result: Ensure the missing numbers are listed in ascending order.

  

